//apply plugin: 'com.github.dcendents.android-maven'
//apply plugin: 'com.jfrog.bintray'
apply plugin: 'groovy'

group 'com.klinec'
version '1.5.9'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
    compile 'org.bouncycastle:bcprov-jdk15on:1.59'
    compile 'org.bouncycastle:bcprov-jdk14:1.50'
    compile 'com.google.guava:guava:18.0'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.apache.ant:ant:1.8.2'
    compile 'net.java.dev.jna:jna:4.2.1'
    compile 'com.payneteasy:ber-tlv:1.0-8'
    compile 'com.google.code.gson:gson:2.8.2'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

def siteUrl = 'https://github.com/ph4r05/javacard-gradle-plugin'
def gitUrl = 'https://github.com/ph4r05/javacard-gradle-plugin.git'

//bintray {
//    user = "$System.env.BINTRAY_USER"
//    key = "$System.env.BINTRAY_KEY"
//
//    configurations = ['archives'] //When uploading configuration files
//
//    dryRun = false //Whether to run this as dry-run, without deploying
//    publish = true //If version should be auto published after an upload
//
//    pkg {
//        repo = 'maven'
//        name = 'gradle-javacard'
//        desc = 'JavaCard gradle plugin'
//        websiteUrl = siteUrl
//        issueTrackerUrl = 'https://github.com/ph4r05/javacard-gradle-plugin/issues'
//        vcsUrl = gitUrl
//        licenses = ['MIT']
//        labels = ['javacard', 'gradle-plugin']
//        publicDownloadNumbers = true
//
//        version {
//            name = project.version //Bintray logical version name
//            vcsTag = project.version
//
//            gpg {
//                sign = true
//                passphrase = "$System.env.GPG_PASSPHRASE"
//            }
//
//            mavenCentralSync {
//                sync = true
//                //Optional (true by default). Determines whether to sync the version to Maven Central.
//                user = "$System.env.MAVEN_CENTRAL_USER_TOKEN" //OSS user token
//                password = "$System.env.MAVEN_CENTRAL_PASSWORD" //OSS user password
//                close = '1'
//                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//            }
//        }
//    }
//}
//
//install {
//    repositories.mavenInstaller {
//        pom {
//            project {
//                description 'JavaCard gradle plugin'
//                packaging 'jar'
//                name 'gradle-javacard'
//                url siteUrl
//                licenses {
//                    license {
//                        name 'The MIT License'
//                        url 'https://github.com/ph4r05/javacard-gradle-plugin/blob/master/LICENSE.md'
//                    }
//                }
//                developers {
//                    developer {
//                        id 'bertrandmartel'
//                        name 'Bertrand Martel'
//                        email 'bmartel.fr@gmail.com'
//                    }
//                    developer {
//                        id 'ph4r05'
//                        name 'Dusan Klinec'
//                        email 'dusan.klinec@gmail.com'
//                    }
//                }
//                scm {
//                    connection 'https://github.com/ph4r05/javacard-gradle-plugin.git'
//                    developerConnection 'https://github.com/ph4r05/javacard-gradle-plugin.git'
//                    url siteUrl
//                }
//            }
//            whenConfigured {
//                p ->
//                    p.dependencies = p.dependencies.findAll {
//                        dep -> (dep.artifactId.notIn(["junit", "hamcrest-all"]))
//                    }
//            }
//        }
//    }
//}

signing {
    required {
        gradle.taskGraph.hasTask("uploadArchives")
    }
    sign configurations.archives
}

// When uploading setup your ~/.gradle/gradle.properties
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.findProperty('ossrhUsername'), password: project.findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.findProperty('ossrhUsername'), password: project.findProperty('ossrhPassword'))
            }

            pom.project {
                name 'gradle-javacard'
                packaging 'jar'

                description 'Gradle JavaCard plugin'
                url 'https://github.com/ph4r05/javacard-gradle-plugin'

                scm {
                    connection 'scm:git:git://github.com/ph4r05/javacard-gradle-plugin'
                    developerConnection 'scm:git:git@github.com:ph4r05/javacard-gradle-plugin.git'
                    url 'https://github.com/ph4r05/javacard-gradle-plugin'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://raw.githubusercontent.com/ph4r05/javacard-gradle-plugin/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'bertrandmartel'
                        name 'Bertrand Martel'
                        email 'bmartel.fr@gmail.com'
                    }
                    developer {
                        id 'ph4r05'
                        name 'Dusan Klinec'
                        email 'dusan.klinec@gmail.com'
                    }
                }
            }
        }
    }
}


sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java/ant-javacard/src/main/java',
                    'src/main/java/global-platform-pro/src',
                    'src/main/java/apdu4j/src',
                    'src/main/java/jnasmartcardio/src/main/java'
            ]
            exclude '**/testapplets/**'
        }
    }
}

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("./doc/")
}

compileJava {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    testLogging.showStandardStreams = true
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
